generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  id                  String   @id @default(cuid())
  userId              String   @unique
  firstName           String
  lastName            String
  conversationCredits Int      @default(0)
  imageCredits        Int      @default(0)
  musicCredits        Int      @default(0)
  collectionCredits   Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  freeCredits         Int      @default(10)
  role                Role     @default(FREE)
  ttsCredits          Int      @default(0)
  videoCredits        Int      @default(0)
  billingAddress      Json?
  paymentMethod       Json?
}

model UserProfile {
  id                String  @id @default(cuid())
  userId            String  @unique
  email             String
  countryCode       String
  businessTelephone String
  walletAddress     String
  youtube           String?
  twitter           String?
  instagram         String?
  discord           String?
  github            String?
  businessName      String
  address           String  @default("")
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model Wallets {
  id        String   @id @default(cuid())
  userId    String
  wallet    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaigns {
  id          String   @id @default(cuid())
  userId      String
  description String?
  refImage    Bytes?   @map("ref_image")
  duration    Int      @default(30)
  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Conversations {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Conversation")
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Images {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  bytes            Int
  format           String
  height           Int
  nsfw             Boolean  @default(false)
  originalFilename String
  prompt           String?  @db.MediumText
  public           Boolean  @default(true)
  publicId         String
  resourceType     String
  secureUrl        String
  url              String
  userId           String
  width            Int
}

model Documents {
  id         String   @id @default(cuid())
  title      String
  content    String
  uploaderID String   @map("uploader_id")
  campaignID String?  @map("campaign_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Music {
  id         String   @id @default(cuid())
  userId     String
  title      String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  genres     Json?
  themes     Json?
  moods      Json?
  origin     String   @default("partner")
  prompt     String   @default("")
}

model Videos {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String
  uploadDate  DateTime @default(now()) @map("upload_date")
  uploaderID  String   @map("uploader_id")
  campaignID  String?  @map("campaign_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TextToSpeech {
  id           String   @id @default(cuid())
  userId       String
  url          String
  secureUrl    String
  playbackUrl  String
  publicId     String
  format       String
  resourceType String
  duration     Float
  bytes        Int
  createdAt    DateTime @default(now())
}

model UploadedImages {
  id           String   @id @default(cuid())
  userId       String
  url          String
  secureUrl    String
  width        Int
  height       Int
  format       String
  resourceType String
  bytes        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  publicId     String
}

model UploadedMusic {
  id           String   @id @default(cuid())
  userId       String
  url          String
  secureUrl    String
  playbackUrl  String
  publicId     String
  format       String
  resourceType String
  duration     Float
  bytes        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UploadedVideo {
  id           String   @id @default(cuid())
  userId       String
  url          String
  secureUrl    String
  playbackUrl  String
  publicId     String
  format       String
  resourceType String
  duration     Float
  bytes        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Collections {
  id                     String         @id @default(cuid())
  name                   String
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  userId                 String
  description            String?
  type                   CollectionType
  count                  Int            @default(0)
  prompt                 String         @default("")
  banner_image           String         @default("")
  banner_image_public_id String?
}

model CollectionMedia {
  id            String   @id @default(cuid())
  collection_id String
  media_id      String
  media_url     String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  userId        String
  name          String
  count_id      Int
}

model MetadataMedia {
  id                  String  @id @default(cuid())
  userId              String
  collection_media_id String  @unique
  name                String
  description         String
  author              String
  media_url           String
  customMetadata      Json?
  isCustom            Boolean @default(false)
}

model MetadataAttributes {
  id                String @id @default(cuid())
  metadata_media_id String
  key               String
  value             String
  orderKey          String @unique
}

model SmartContracts {
  id          String         @id @default(cuid())
  userId      String
  contract    String         @db.LongText
  name        String
  is_deployed Boolean        @default(false)
  status      ContractStatus @default(CREATED)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
}

model Business {
  id                            String   @id @default(cuid())
  name                          String?  @db.LongText
  description                   String?  @db.LongText
  mission                       String?  @db.LongText
  goalShort                     String?  @db.LongText
  goalMed                       String?  @db.LongText
  goalLong                      String?  @db.LongText
  targetMarket                  String?  @db.LongText
  targetCustomers               String?  @db.LongText
  competitiveAdvantages         String?  @db.LongText
  keyProducts                   String?  @db.LongText
  marketingStrategy             String?  @db.LongText
  financialProjection           String?  @db.LongText
  managementTeamQualifications  String?  @db.LongText
  challenges                    String?  @db.LongText
  opportunities                 String?  @db.LongText
  challengesToIndustry          String?  @db.LongText
  competitorsStrength           String?  @db.LongText
  competitorsWeakness           String?  @db.LongText
  differentiationFromCompetitor String?  @db.LongText
  plansForGrowthOrExpansion     String?  @db.LongText
  howToMeasureSuccess           String?  @db.LongText
  keyTrends                     String?  @db.LongText
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  userId                        String   @unique
  product                       String?  @db.LongText
}

model CryptoBusiness {
  id                 String   @id @default(cuid())
  name               String?  @db.LongText
  purpose            String?  @db.LongText
  roadmap            String?  @db.LongText
  team               String?  @db.LongText
  tokenomics         String?  @db.LongText
  fundSource         String?  @db.LongText
  risks              String?  @db.LongText
  blockchainplatform String?  @db.LongText
  techSpecifications String?  @db.LongText
  securityFeatures   String?  @db.LongText
  targetMarket       String?  @db.LongText
  marketingStrategy  String?  @db.LongText
  governance         String?  @db.LongText
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
}

model Financials {
  id                             String  @id @default(cuid())
  userId                         String  @unique
  revenueStreams                 String? @db.LongText
  expenses                       String? @db.LongText
  expenseCategories              String? @db.LongText
  accountingPeriod               String? @db.LongText
  trackingRevenueExpenses        String? @db.LongText
  assets                         String? @db.LongText
  liabilities                    String? @db.LongText
  equity                         String? @db.LongText
  assetLiabilityValuation        String? @db.LongText
  reportingDate                  String? @db.LongText
  budgetNextPeriod               String? @db.LongText
  financialBenchmarks            String? @db.LongText
  accountingSoftwareUsed         String? @db.LongText
  financialReportingRequirements String? @db.LongText
}

model ReferenceImages {
  id            String   @id @default(cuid())
  userId        String
  type          String
  url           String
  secure_url    String
  description   String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  public_id     String
  resource_type String
}

model Customers {
  id                 String   @id @default(cuid())
  userId             String   @unique
  stripeCustomerId   String
  createdAt          DateTime @default(now())
  currentPeriodEnd   DateTime @default(now())
  currentPeriodStart DateTime @default(now())
}

model WhitelistRequests {
  id             String @id @default(cuid())
  userId         String @unique
  email          String
  wallet_address String
}

model ChainLinkRaffle {
  id        String   @id @default(cuid())
  userId    String
  email     String
  wallet    String   @unique
  createdAt DateTime @default(now())
}

model JoinCommunity {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model ChainLinkWinners {
  id                String   @id @default(cuid())
  userId            String
  wallet            String
  weeklyWinnersDate DateTime
  createdAt         DateTime @default(now())
  generations       Int      @default(0)
}

model Predictions {
  id           String             @id @default(cuid())
  status       Predictions_status @default(INQUEUE)
  output       String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  input        Json
  error        String?
  modelVersion String
}

model CollectionPredictions {
  id           String             @id @default(cuid())
  status       Predictions_status @default(INQUEUE)
  output       String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  input        Json
  error        String?
  modelVersion String
  collectionId String
}

model CollectionImages {
  id               String                  @id @default(cuid())
  createdAt        DateTime                @default(now())
  updatedAt        DateTime
  bytes            Int
  format           String
  height           Int
  nsfw             Boolean                 @default(false)
  originalFilename String
  prompt           String?                 @db.MediumText
  public           Boolean                 @default(true)
  publicId         String
  resourceType     String
  secureUrl        String
  url              String
  userId           String
  width            Int
  models           CollectionImages_models
}

model CollectionOrder {
  id           String             @id @default(cuid())
  userId       String
  collectionId String
  prompt       String
  count        Int
  refImage     String
  modelVersion String
  status       Predictions_status
}

model TempGenerations {
  id        String                  @id @default(cuid())
  userId    String
  model     CollectionImages_models
  publicId  String
  url       String
  secureUrl String
  width     Int
  height    Int
  prompt    String                  @db.MediumText
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  public    Boolean                 @default(true)
}

enum ContractStatus {
  CREATED
  DEPLOYED
  PENDING
  IN_PROGRESS
  CANCELLED
}

enum Role {
  FREE
  PRO
  PREMIUM
}

enum CollectionType {
  IMAGE
  MUSIC
  VIDEO
}

enum Predictions_status {
  INQUEUE
  STARTING
  PROCESSING
  SUCCESS
  FAILED
}

enum CollectionImages_models {
  SHEFA_TURBO
  DREAMSHAPER_XL_TURBO
  KANDINSKY
  PLAYGROUND
  SDXL
  SDXL_LIGHTNING
  INSTANT_ID
  PHOTOMAKER
  REALISTIC_VISION_IMPAINTING
  STABLE_DIFFUSION_IMPAINTING
  FACE_SWAP
  LLAVA_13B
  MUSICGEN
  STYLETTS
  TORTOISE_TTS
  CHAMP
  ZERO_SCOPE
  ANIMATE_DIFF
  MUSTANGO
  SONGSTARTER
}
